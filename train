class Train

  attr_accessor :speed, :vans, :station
  attr_reader :number, :type, :route
  
  # Имеет номер (произвольная строка) и тип (грузовой,
  # пассажирский) и количество вагонов, эти данные
  # указываются при создании экземпляра класса  
  def initialize(speed = 0, number, type, vans)
    @speed = speed
    @nubmer = number
    @type = type
    @vans = vans
  end  


  # Может набирать скорость
  def go(speed)
    self.speed += speed
  end  

  # Может возвращать текущую скорость
  def current
    puts @speed
  end  

  # Может тормозить (сбрасывать скорость до нуля)
  def stop 
    self.speed = 0
  end

  # Может возвращать количество вагонов
  def vans
    puts @vans
  end

  # Может принимать маршрут следования (объект класса Route). 
  # При назначении маршрута поезду, поезд автоматически помещается на первую станцию в маршруте.
  def route=(route)
     @route = route
    self.station = self.route.stations.first
  end

  # Может перемещаться между станциями, указанными
  # в маршруте. Перемещение возможно вперед и назад,
  # но только на 1 станцию за раз.
  # Ввод "next" перемещает вперёд, ввод "lastone" -- назад.
  def move(where)
    if where == "next"
      self.station = self.route.stations[self.route.stations.index(self.station) + 1]
    end  
    if where == "lastone"  
      self.station = self.route.stations[self.route.stations.index(self.station) - 1]
    end  
  end

  # Возвращать предыдущую станцию, текущую,
  # следующую, на основе маршрута
  # Ввод "current" возвращает текущую станцию,
  # "next" -- следующую, "last" -- предыдущую.
  def which_station(what)
    if what == "current"
      self.route.stations[self.route.stations.index(self.station)]
    end
  
    if what == "next"
      self.route.stations[self.route.stations.index(self.station) + 1]
    end  

    if what == "last"
      self.route.stations[self.route.stations.index(self.station) - 1]
    end  
  end

end
